# Import
import math

import time
from optparse import OptionParser

from naoqi import *


class generate (object):

    def __init__(self):

        self.NAO_IP = "172.20.10.9"
        parser = OptionParser()
        parser.add_option(
            "--pip", help="Parent broker port. The IP address or your robot", dest="pip")
        parser.add_option(
            "--pport", help="Parent broker port. The port NAOqi is listening to", dest="pport", type="int")
        parser.set_defaults(pip=self.NAO_IP, pport=9559)
        (opts, args_) = parser.parse_args()
        pip = opts.pip
        pport = opts.pport
        # parse command line options
        self.myBroker = ALBroker("myBroker", "0.0.0.0",  # Listen to anyone
                                 0,  # find a free port and use it
                                 pip,  # parent broker ip
                                 pport)  # parent broker port
        # Create ALProxy
        self.tts = ALProxy("ALTextToSpeech")
        self.motion = ALProxy("ALMotion")
        self.posture = ALProxy("ALRobotPosture")
        self.memory = ALProxy("ALMemory")
        self.tracker = ALProxy("ALTracker")
        self.mark = ALProxy("ALLandMarkDetection")
        self.photo = ALProxy("ALPhotoCapture")
        self.sonar = ALProxy("ALSonar")
        self.sonar.subscribe("myApplication")
        self.led = ALProxy("ALLeds")
        self.video = ALProxy("ALVideoRecorder")
        self.asr = ALProxy("ALSpeechRecognition")
        self.aup = ALProxy("ALAudioPlayer")
        self.fd = ALProxy("ALFaceDetection")
        self.awareness = ALProxy("ALBasicAwareness")

        self.naoMarkInformation = {}
        print "done"
    # MOVEMENT

    def stand(self):
        self.posture.goToPosture("StandInit", 1.0)

    def sit(self):
        self.posture.goToPosture("Sit", 1.0)

    def crouch(self):
        self.posture.goToPosture("crouch", 1.0)

    def LyingBelly(self):
        self.posture.goToPosture("LyingBelly", 1.0)

    def LyingBack(self):
        self.posture.goToPosture("LyingBack", 1.0)


    # def applyPosture(self, pose):
    #     # posture.goToPosture is used instead of applyPosture as this is a
    #     # "intelligent" move calculating the path on its own
    #     if pose == 'Rest':
    #         self.motion.rest()
    #     else:
    #         self.posture.goToPosture(pose, 0.8)

    def stiffness(self, bodypart, status):
        if status == 1:
            self.motion.setStiffnesses(bodypart, 1.0)
        elif status == 2:
            self.motion.setStiffnesses(bodypart, 0)

    def autonomous(self, mode):
        if mode == 1:
            self.awareness.startAwareness()
            self.motion.setBreathEnabled("Body", True)
        elif mode == 2:
            self.awareness.stopAwareness()
            self.motion.setBreathEnabled("Body", False)

    def setAutonomousLife(self, state):
        if state == 'ON':
            self.awareness.startAwareness()
            self.motion.setBreathEnabled("Body", True)
        elif state == 'OFF':
            self.awareness.stopAwareness()
            self.motion.setBreathEnabled("Body", False)
        else:
            pass

    def OpenHand(self, handName):
            self.motion.openHand(handName)

    def CloseHand(self, handName):
            self.motion.closeHand(handName)

    def moveJoint(self, jointName, degrees, mode):
        rad = math.radians(degrees)
        if mode == 1:
            self.motion.setAngles(jointName, rad, 0.2)
        elif mode == 2:
            self.motion.changeAngles(jointName, rad, 0.2)

    # WALK

    def walk(self, x, y, theta):
        rad = math.radians(theta)
        self.motion.moveTo(x / 100.0, y / 100.0, rad)

    def stop(self):
        self.motion.stopMove()

    # def walkAsync(self, xSpeed, ySpeed, zSpeed):
    #     '''We get speeds in range 0-100, so we need to normalise them to 0-0.3 m/s'''
    #
    #     maxSpeed = 0.3
    #
    #     xSpeed = maxSpeed * (xSpeed / 100.0)
    #     ySpeed = maxSpeed * (ySpeed / 100.0)
    #     zSpeed = maxSpeed * (zSpeed / 100.0)
    #     self.motion.move(xSpeed, ySpeed, zSpeed)

    # ANIMATIONS

    def taiChi(self):
        #         names = list()
        # times = list()
        # keys = list()
        #
        # self.posture.goToPosture("Stand", 1.0)
        #
        # names.append("HeadPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0, 8.95233e-08, -4.76838e-07, 8.89455e-08, 1.04976e-07, 0.331613, 0.314159, 9.19019e-08, -0.331613,
        #              0.139626, -
        #              0.0872665, 0.139626, 0.383972, 0.558505, 0.383972, -0.331613, 0.139626, -0.0872665, 0.139626,
        #              0.383972, 0, -0.190258])
        #
        # names.append("HeadYaw")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append(
        #     [0, 8.42936e-08, 8.42938e-08, 8.42938e-08, -4.76838e-07, 0.314159, -0.296706, -1.18682, -0.279253, 0.20944,
        #      1.5708, 0.20944, 0.139626, 0, -0.139626, 0.279253, -0.20944, -1.5708, -0.20944, -0.139626, 0, -0.00310993])
        #
        # names.append("LAnklePitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 43.4, 44.4, 46.2, 50])
        # keys.append(
        #     [1.00403e-07, 0, -0.303687, 0, 0, -0.647517, -0.610865, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -
        #     1.0472, -0.872665, -0.741765, 0, 1.00403e-07, 0.523599, 1.00403e-07, -0.555015, -0.654498, -1.0472,
        #      0.033706])
        #
        # names.append("LAnkleRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0.0523599, 0.122173, 0.174533, -0.10472, -0.10472, 0.174533, -0.261799, 0.0628318, 0.1309,
        #              0, 0, 0, 0.0872665, 0, -0.240855, -0.55676, -0.424115, -0.349066, 0, -0.349066, -0.312414, 0,
        #              -0.05058])
        #
        # names.append("LElbowRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        # keys.append([0, -0.698132, -1.0472, 0, 0, -1.65806, -0.959931, -1.48353, -1.01229, -1.01229, 0, -1.01229, -
        # 1.01229, -0.890118, -0.855211, -1.11701, -0.855211, -1.25664, -0.855211, -0.855211, -0.994838, -1.4207,
        #              -0.38806])
        #
        # names.append("LElbowYaw")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        # keys.append([-1.5708, -1.5708, -1.5708, -1.5708, -1.5708, -0.383972, 0, 0, 0, 0, 0, 0, 0, 0.20944,
        #              0.191986, -0.418879, -0.418879, -0.0872665, -0.418879, 0.191986, -0.378736, -0.244346, -1.18276])
        #
        # names.append("LHand")
        # times.append([3, 50])
        # keys.append([0, 0.2984])
        #
        # names.append("LHipPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0, 0, -0.349066, 0, 0, -0.698132, -0.610865, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -
        # 1.0472, -0.872665, -0.741765, -0.122173, -0.872665, 0, -0.872665, -0.654498, -1.0472, 0.216335])
        #
        # names.append("LHipRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append(
        #     [-0.0523599, -0.122173, -0.174533, 0.10472, 0.10472, -0.174533, 0.174533, 0.420624, 0.528835, 0.610865,
        #      0.610865, 0.610865, 0.349066, 0, -0.261799, 0.251327, 0.261799, 0.139626, 0.698132, 0.139626, -0.261799, 0,
        #      0.0414601])
        #
        # names.append("LHipYawPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([-0.10821, -0.120428, -0.1309, -0.120428, -0.143117, -0.167552, -
        # 0.0994838, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0680678, 0, -0.194775])
        #
        # names.append("LKneePitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0, 0, 0.698132, -9.9341e-08, -9.9341e-08, 1.39626, 1.22173, 2.0944, 2.0944, 2.0944,
        #              2.0944, 2.0944, 2.1101, 1.74533, 1.48353, 0.122173, 1.74533, 0, 1.74533, 1.309, 2.0944,
        #              -0.0890141])
        #
        # names.append("LShoulderPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append(
        #     [1.5708, 1.91986, 2.0944, 1.5708, 0, 0.366519, 0.349066, 0.191986, -0.802851, -0.174533, -0.296706, -
        #     0.174533, 0.523599, 0.471239, 0.331613, -0.471239, 0.0698132, -0.0698132, 0.0698132, 0.331613, 1.69297,
        #      1.52936])
        #
        # names.append("LShoulderRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0.174533, 0.349066, 0.174533, 0.174533, 0.174533, 0.698132, 0, 0.0872665, 0.174533,
        #              0.401426, 1.15192, 0.401426, 0.401426, 0.174533, 0, 0.401426, 0, 0, 0, 0.20944, 0.942478,
        #              0.107338])
        #
        # names.append("LWristYaw")
        # times.append([3, 50])
        # keys.append([-1.53589, 0.139552])
        #
        # names.append("RAnklePitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([1.00403e-07, 0, 0, 0, 0, -0.698132, -0.174533, 0, 0, 1.00403e-07, 0.523599, 1.00403e-07, -
        # 0.741765, -0.872665, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, 0.036858])
        #
        # names.append("RAnkleRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([-0.0523599, 0.1309, 0.438078, 0.10472, 0.10472, 0.294961, 0.621337, 0.785398, 0.74351, 0.436332, 0,
        #              0.349066, 0.261799, 0, -0.174533, -0.174533, -0.0424667, -0.0225556, -0.0130542, -0.00206581, 0,
        #              0.0291878])
        #
        # names.append("RElbowRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        # keys.append(
        #     [0, 0.698132, 1.0472, 2.57424e-07, 0, 1.23918, 1.64061, 0.0698132, 1.11701, 0.855211, 1.25664, 0.855211,
        #      0.855211, 0.890118, 1.01229, 1.01229, 1.01229, 0.0349066, 1.01229, 1.01229, 1.13272, 1.36659, 0.395814])
        #
        # names.append("RElbowYaw")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2, 50])
        # keys.append([1.5708, 1.5708, 1.5708, 1.5708, 1.5708, 0.191986, 0.349066, 1.5708, 0.418879, 0.418879,
        #              0.0872665, 0.418879, -0.191986, -0.20944, 0, 0, 0, 0, 0, 0, 0.342085, 0.244346, 1.15966])
        #
        # names.append("RHand")
        # times.append([3, 50])
        # keys.append([0, 0.302])
        #
        # names.append("RHipPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0, 0, 0, 0, 0, -0.698132, -0.174533, -0.10472, -0.122173, -0.872665, 0, -0.872665, -
        # 0.741765, -0.872665, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, -1.0472, 0.214717])
        #
        # names.append("RHipRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append(
        #     [0.0523599, -0.122173, -0.438078, -0.10472, -0.10472, -0.349066, -0.785398, -0.541052, -0.139626, -0.139626,
        #      -
        #      0.698132, -0.139626, 0.261799, 0, -0.349066, -0.539307, -0.610865, -0.610865, -0.610865, -0.532325, 0,
        #      -0.021434])
        #
        # names.append("RHipYawPitch")
        # times.append([3, 5, 7, 9, 11, 13, 50])
        # keys.append([-0.10821, -0.120428, -0.1309, -
        # 0.120428, -0.143117, -0.167552, -0.194775])
        #
        # names.append("RKneePitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([0, 0, 0, 0, 0, 1.39626, 0.349066, 0.122173, 0.122173, 1.74533, 0, 1.74533,
        #              1.48353, 1.74533, 2.0944, 2.0944, 2.0944, 2.0944, 2.0944, 2.0944, 2.0944, -0.091998])
        #
        # names.append("RShoulderPitch")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([1.5708, 1.91986, 2.0944, 1.5708, 0, 0.174533, 0.610865, 1.0472, -0.471239, 0.0698132, -0.0698132,
        #              0.0698132, 0.331613, 0.471239, 0.523599, -0.802851, -0.174533, -0.296706, -0.174533, 0.523599,
        #              1.69297, 1.51563])
        #
        # names.append("RShoulderRoll")
        # times.append([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2,
        #               28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        # keys.append([-0.174533, -0.174533, -0.349066, -0.174533, -0.174515, -0.0698132, -0.837758, -1.51844, -0.401426,
        #              0, 0, 0, 0, -0.174533, -0.401426, -0.174533, -0.401426, -1.15192, -0.401426, -0.558505, -0.942478,
        #              -0.099752])
        #
        # names.append("RWristYaw")
        # times.append([3, 50])
        # keys.append([1.53589, 0.164096])
        names = list()
        times = list()
        keys = list()
        self.posture.goToPosture("Stand", 1.0)
        names.append("HeadPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [8.95233e-08, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [8.89455e-08, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]],
                     [1.04976e-07, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]],
                     [0.331613, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.314159, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]],
                     [9.19019e-08, [3, -0.666667, 0.107629], [3, 0.666667, -0.107629]],
                     [-0.331613, [3, -0.666667, 0], [3, 0.666667, 0]], [0.139626, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]],
                     [0.383972, [3, -0.733333, -0.0731376], [3, 0.666667, 0.0664887]],
                     [0.558505, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.383972, [3, -0.666667, 0.148353], [3, 0.666667, -0.148353]],
                     [-0.331613, [3, -0.666667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]],
                     [0.383972, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0.0615247], [3, 1.26667, -0.129886]],
                     [-0.190258, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append(
            [[0, [3, -1, 0], [3, 0.666667, 0]], [8.42936e-08, [3, -0.666667, -1.7461e-13], [3, 0.666667, 1.7461e-13]],
             [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]],
             [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]], [0.314159, [3, -0.666667, 0], [3, 0.666667, 0]],
             [-0.296706, [3, -0.666667, 0.250164], [3, 0.666667, -0.250164]],
             [-1.18682, [3, -0.666667, 0], [3, 0.666667, 0]],
             [-0.279253, [3, -0.666667, -0.232711], [3, 0.666667, 0.232711]],
             [0.20944, [3, -0.666667, -0.268123], [3, 0.866667, 0.34856]],
             [1.5708, [3, -0.866667, 0], [3, 0.866667, 0]],
             [0.20944, [3, -0.866667, 0.0825065], [3, 0.733333, -0.0698132]],
             [0.139626, [3, -0.733333, 0.0365688], [3, 0.666667, -0.0332444]],
             [0, [3, -0.666667, 0.0465421], [3, 0.666667, -0.0465421]],
             [-0.139626, [3, -0.666667, 0], [3, 0.666667, 0]], [0.279253, [3, -0.666667, 0], [3, 0.866667, 0]],
             [-0.20944, [3, -0.866667, 0.308341], [3, 0.866667, -0.308341]],
             [-1.5708, [3, -0.866667, 0], [3, 0.866667, 0]],
             [-0.20944, [3, -0.866667, -0.0825065], [3, 0.733333, 0.0698132]],
             [-0.139626, [3, -0.733333, -0.0383972], [3, 0.6, 0.0314159]], [0, [3, -0.6, 0], [3, 1.26667, 0]],
             [-0.00310993, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 43.4, 44.4, 46.2,
             50])
        keys.append(
            [[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 1.00403e-07], [3, 0.666667, -1.00403e-07]],
             [-0.303687, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.647517, [3, -0.666667, 0], [3, 0.666667, 0]],
             [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]],
             [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]],
             [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]],
             [-1.0472, [3, -0.733333, 0], [3, 0.666667, 0]],
             [-0.872665, [3, -0.666667, -0.0509054], [3, 0.666667, 0.0509054]],
             [-0.741765, [3, -0.666667, -0.1309], [3, 0.666667, 0.1309]],
             [0, [3, -0.666667, -7.72328e-08], [3, 0.866667, 1.00403e-07]],
             [1.00403e-07, [3, -0.866667, -1.00403e-07], [3, 0.866667, 1.00403e-07]],
             [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]], [1.00403e-07, [3, -0.866667, 0.246], [3, 0.4, -0.113538]],
             [-0.555015, [3, -0.4, 0.119], [3, 0.333333, -0.0991665]],
             [-0.654498, [3, -0.333333, 0.0585932], [3, 0.6, -0.105468]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]],
             [0.033706, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2,
             50])
        keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]],
                     [0.122173, [3, -0.666667, -0.0203622], [3, 0.666667, 0.0203622]],
                     [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.261799, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.0628318, [3, -0.666667, -0.0654498], [3, 0.666667, 0.0654498]],
                     [0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0.0872665, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0.054687], [3, 0.666667, -0.054687]],
                     [-0.240855, [3, -0.666667, 0.123724], [3, 0.333333, -0.0618622]],
                     [-0.55676, [3, -0.333333, 0], [3, 0.333333, 0]],
                     [-0.424115, [3, -0.333333, -0.0192309], [3, 0.866667, 0.0500005]],
                     [-0.349066, [3, -0.866667, -0.0706858], [3, 0.866667, 0.0706858]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.349066, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.312414, [3, -0.733333, -0.0366519], [3, 0.6, 0.0299879]], [0, [3, -0.6, 0], [3, 1.26667, 0]],
                     [-0.05058, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2,
             50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0.174533], [3, 0.666667, -0.174533]],
                     [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.65806, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.959931, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.48353, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.01229, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.01229, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-1.01229, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [-0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]],
                     [-0.855211, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.11701, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-0.855211, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.25664, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.855211, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.855211, [3, -0.733333, 0], [3, 0.333333, 0]],
                     [-0.994838, [3, -0.333333, 0.10472], [3, 0.266667, -0.0837758]],
                     [-1.4207, [3, -0.266667, 0], [3, 1.26667, 0]], [-0.38806, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2,
             50])
        keys.append([[-1.5708, [3, -1, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.383972, [3, -0.666667, -0.261799], [3, 0.666667, 0.261799]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0, [3, -0.733333, 0], [3, 0.666667, 0]], [0.20944, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.191986, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]],
                     [-0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.418879, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.418879, [3, -0.866667, 0], [3, 0.733333, 0]], [0.191986, [3, -0.733333, 0], [3, 0.333333, 0]],
                     [-0.378736, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.244346, [3, -0.266667, 0], [3, 1.26667, 0]],
                     [-1.18276, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([3, 50])
        keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.2984, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-1.0472, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [-0.872665, [3, -0.666667, -0.0509054], [3, 0.666667, 0.0509054]],
                     [-0.741765, [3, -0.666667, -0.125082], [3, 0.666667, 0.125082]],
                     [-0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.654498, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]],
                     [0.216335, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 33.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2,
             50])
        keys.append([[-0.0523599, [3, -1, 0], [3, 0.666667, 0]],
                     [-0.122173, [3, -0.666667, 0.0203622], [3, 0.666667, -0.0203622]],
                     [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.174533, [3, -0.666667, -0.0991929], [3, 0.666667, 0.0991929]],
                     [0.420624, [3, -0.666667, -0.0590503], [3, 0.666667, 0.0590503]],
                     [0.528835, [3, -0.666667, -0.0317068], [3, 0.666667, 0.0317068]],
                     [0.610865, [3, -0.666667, 0], [3, 0.866667, 0]], [0.610865, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.610865, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0.349066, [3, -0.733333, 0.106659], [3, 0.666667, -0.0969627]],
                     [0, [3, -0.666667, 0.101811], [3, 0.666667, -0.101811]],
                     [-0.261799, [3, -0.666667, 0], [3, 0.333333, 0]],
                     [0.251327, [3, -0.333333, -0.010472], [3, 0.333333, 0.010472]],
                     [0.261799, [3, -0.333333, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.698132, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.139626, [3, -0.866667, 0.173321], [3, 0.733333, -0.146656]],
                     [-0.261799, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, -0.019639], [3, 1.26667, 0.0414601]],
                     [0.0414601, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]],
                     [-0.120428, [3, -0.666667, 0.00378155], [3, 0.666667, -0.00378155]],
                     [-0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.143117, [3, -0.666667, 0.00785398], [3, 0.666667, -0.00785398]],
                     [-0.167552, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.0994838, [3, -0.666667, -0.0279253], [3, 0.666667, 0.0279253]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.0680678, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0], [3, 1.26667, 0]],
                     [-0.194775, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-9.9341e-08, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-9.9341e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.22173, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [2.1101, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [1.74533, [3, -0.666667, 0.104429], [3, 0.666667, -0.104429]],
                     [1.48353, [3, -0.666667, 0.261799], [3, 0.666667, -0.261799]],
                     [0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [1.309, [3, -0.733333, 0], [3, 0.6, 0]], [2.0944, [3, -0.6, 0], [3, 1.26667, 0]],
                     [-0.0890141, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append(
            [[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]],
             [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]],
             [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.366519, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.349066, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]],
             [0.191986, [3, -0.666667, 0.15708], [3, 0.666667, -0.15708]],
             [-0.802851, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]],
             [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]],
             [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]],
             [0.523599, [3, -0.733333, 0], [3, 0.666667, 0]],
             [0.471239, [3, -0.666667, 0.0319977], [3, 0.666667, -0.0319977]],
             [0.331613, [3, -0.666667, 0.139626], [3, 0.666667, -0.139626]],
             [-0.471239, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]],
             [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]],
             [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]],
             [0.331613, [3, -0.733333, -0.261799], [3, 0.6, 0.214199]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]],
             [1.52936, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0.174533, [3, -1, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.0872665, [3, -0.666667, -0.0290888], [3, 0.666667, 0.0290888]],
                     [0.174533, [3, -0.666667, -0.0523599], [3, 0.666667, 0.0523599]],
                     [0.401426, [3, -0.666667, -0.14165], [3, 0.866667, 0.184145]],
                     [1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [0.401426, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0.401426, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.401426, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0.20944, [3, -0.733333, -0.172788], [3, 0.6, 0.141372]],
                     [0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [0.107338, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([3, 50])
        keys.append([[-1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.139552, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.174533, [3, -0.666667, -0.116355], [3, 0.666667, 0.116355]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.00403e-07, [3, -0.666667, -1.00403e-07], [3, 0.866667, 1.30524e-07]],
                     [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [1.00403e-07, [3, -0.866667, 0.228468], [3, 0.733333, -0.193319]],
                     [-0.741765, [3, -0.733333, 0.14399], [3, 0.666667, -0.1309]],
                     [-0.872665, [3, -0.666667, 0.0509054], [3, 0.666667, -0.0509054]],
                     [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]],
                     [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.036858, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append(
            [[-0.0523599, [3, -1, 0], [3, 0.666667, 0]], [0.1309, [3, -0.666667, -0.0817396], [3, 0.666667, 0.0817396]],
             [0.438078, [3, -0.666667, 0], [3, 0.666667, 0]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.294961, [3, -0.666667, -0.0861029], [3, 0.666667, 0.0861029]],
             [0.621337, [3, -0.666667, -0.0817396], [3, 0.666667, 0.0817396]],
             [0.785398, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.74351, [3, -0.666667, 0.0418879], [3, 0.666667, -0.0418879]],
             [0.436332, [3, -0.666667, 0.107755], [3, 0.866667, -0.140082]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
             [0.349066, [3, -0.866667, 0], [3, 0.733333, 0]],
             [0.261799, [3, -0.733333, 0.060948], [3, 0.666667, -0.0554073]],
             [0, [3, -0.666667, 0.0727221], [3, 0.666667, -0.0727221]],
             [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]],
             [-0.0424667, [3, -0.866667, -0.0199111], [3, 0.866667, 0.0199111]],
             [-0.0225556, [3, -0.866667, -0.00490207], [3, 0.866667, 0.00490207]],
             [-0.0130542, [3, -0.866667, -0.00369954], [3, 0.733333, 0.00313038]],
             [-0.00206581, [3, -0.733333, -0.00239327], [3, 0.6, 0.00195813]],
             [0, [3, -0.6, -0.00206581], [3, 1.26667, 0.00436115]], [0.0291878, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2,
             50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, -0.174533], [3, 0.666667, 0.174533]],
                     [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [2.57424e-07, [3, -0.666667, 2.57424e-07], [3, 0.666667, -2.57424e-07]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.23918, [3, -0.666667, -0.273435], [3, 0.666667, 0.273435]],
                     [1.64061, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.11701, [3, -0.666667, 0], [3, 0.666667, 0]], [0.855211, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [1.25664, [3, -0.866667, 0], [3, 0.866667, 0]], [0.855211, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0.855211, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]],
                     [1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [1.01229, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [1.01229, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0349066, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [1.01229, [3, -0.866667, 0], [3, 0.733333, 0]], [1.01229, [3, -0.733333, 0], [3, 0.333333, 0]],
                     [1.13272, [3, -0.333333, -0.0656115], [3, 0.266667, 0.0524892]],
                     [1.36659, [3, -0.266667, 0], [3, 1.26667, 0]], [0.395814, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 45.4, 46.2,
             50])
        keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.191986, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.349066, [3, -0.666667, -0.15708], [3, 0.666667, 0.15708]],
                     [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.418879, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0.418879, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.191986, [3, -0.733333, 0.0191986], [3, 0.666667, -0.0174533]],
                     [-0.20944, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [0, [3, -0.733333, 0], [3, 0.333333, 0]], [0.342085, [3, -0.333333, 0], [3, 0.266667, 0]],
                     [0.244346, [3, -0.266667, 0], [3, 1.26667, 0]], [1.15966, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([3, 50])
        keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.302, [3, -15.6667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.174533, [3, -0.666667, -0.0698132], [3, 0.666667, 0.0698132]],
                     [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.122173, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]],
                     [-0.872665, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.741765, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [-0.872665, [3, -0.666667, 0.0509054], [3, 0.666667, -0.0509054]],
                     [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]],
                     [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.214717, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]],
                     [-0.122173, [3, -0.666667, 0.0817396], [3, 0.666667, -0.0817396]],
                     [-0.438078, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.349066, [3, -0.666667, 0.113446], [3, 0.666667, -0.113446]],
                     [-0.785398, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.541052, [3, -0.666667, -0.107629], [3, 0.666667, 0.107629]],
                     [-0.139626, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.139626, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-0.698132, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.139626, [3, -0.866667, -0.173321], [3, 0.733333, 0.146656]],
                     [0.261799, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0.101811], [3, 0.666667, -0.101811]],
                     [-0.349066, [3, -0.666667, 0.0898845], [3, 0.666667, -0.0898845]],
                     [-0.539307, [3, -0.666667, 0.0379419], [3, 0.866667, -0.0493245]],
                     [-0.610865, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.610865, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [-0.610865, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.532325, [3, -0.733333, -0.0785398], [3, 0.6, 0.0642598]], [0, [3, -0.6, 0], [3, 1.26667, 0]],
                     [-0.021434, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([3, 5, 7, 9, 11, 13, 50])
        keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]],
                     [-0.120428, [3, -0.666667, 0.00378155], [3, 0.666667, -0.00378155]],
                     [-0.1309, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.143117, [3, -0.666667, 0.00785398], [3, 0.666667, -0.00785398]],
                     [-0.167552, [3, -0.666667, 0.000883047], [3, 12.3333, -0.0163364]],
                     [-0.194775, [3, -12.3333, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [0.349066, [3, -0.666667, 0.212348], [3, 0.666667, -0.212348]],
                     [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]], [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [1.74533, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]], [1.48353, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [1.74533, [3, -0.666667, -0.101811], [3, 0.666667, 0.101811]],
                     [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]], [2.0944, [3, -0.733333, 0], [3, 0.6, 0]],
                     [2.0944, [3, -0.6, 0], [3, 1.26667, 0]], [-0.091998, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append(
            [[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]],
             [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]],
             [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.174533, [3, -0.666667, -0.101811], [3, 0.666667, 0.101811]],
             [0.610865, [3, -0.666667, -0.145444], [3, 0.666667, 0.145444]],
             [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.471239, [3, -0.666667, 0], [3, 0.666667, 0]],
             [0.0698132, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]],
             [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]],
             [0.331613, [3, -0.733333, -0.0700902], [3, 0.666667, 0.0637184]],
             [0.471239, [3, -0.666667, -0.0319977], [3, 0.666667, 0.0319977]],
             [0.523599, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.802851, [3, -0.666667, 0], [3, 0.866667, 0]],
             [-0.174533, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]],
             [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]],
             [0.523599, [3, -0.733333, -0.342375], [3, 0.6, 0.280125]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]],
             [1.51563, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append(
            [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23.6, 26.2, 28.4, 30.4, 32.4, 34.4, 37, 39.6, 42.2, 44.4, 46.2, 50])
        keys.append([[-0.174533, [3, -1, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.349066, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.174533, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]],
                     [-0.174515, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]],
                     [-0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.837758, [3, -0.666667, 0.241437], [3, 0.666667, -0.241437]],
                     [-1.51844, [3, -0.666667, 0], [3, 0.666667, 0]],
                     [-0.401426, [3, -0.666667, -0.253073], [3, 0.666667, 0.253073]],
                     [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]],
                     [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]],
                     [-0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]],
                     [-0.401426, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]],
                     [-0.401426, [3, -0.866667, 0.162897], [3, 0.866667, -0.162897]],
                     [-1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.401426, [3, -0.866667, 0], [3, 0.733333, 0]],
                     [-0.558505, [3, -0.733333, 0.0991929], [3, 0.6, -0.0811578]],
                     [-0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [-0.099752, [3, -1.26667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([3, 50])
        keys.append([[1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.164096, [3, -15.6667, 0], [3, 0, 0]]])

        self.motion.angleInterpolation(names, keys, times, True)

    def wave(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.8, 1.56, 2.24, 2.8, 3.48, 4.6])
        keys.append([0.29602, -0.170316, -0.340591, -0.0598679, -0.193327, -0.01078])

        names.append("HeadYaw")
        times.append([0.8, 1.56, 2.24, 2.8, 3.48, 4.6])
        keys.append([-0.135034, -0.351328, -0.415757, -0.418823, -0.520068, -0.375872])

        names.append("LElbowRoll")
        times.append([0.72, 1.48, 2.16, 2.72, 3.4, 4.52])
        keys.append([-1.37902, -1.29005, -1.18267, -1.24863, -1.3192, -1.18421])

        names.append("LElbowYaw")
        times.append([0.72, 1.48, 2.16, 2.72, 3.4, 4.52])
        keys.append([-0.803859, -0.691876, -0.679603, -0.610574, -0.753235, -0.6704])

        names.append("LHand")
        times.append([1.48, 4.52])
        keys.append([0.238207, 0.240025])

        names.append("LShoulderPitch")
        times.append([0.72, 1.48, 2.16, 2.72, 3.4, 4.52])
        keys.append([1.11824, 0.928028, 0.9403, 0.862065, 0.897349, 0.842125])

        names.append("LShoulderRoll")
        times.append([0.72, 1.48, 2.16, 2.72, 3.4, 4.52])
        keys.append([0.363515, 0.226991, 0.20398,
                     0.217786, 0.248467, 0.226991])

        names.append("LWristYaw")
        times.append([1.48, 4.52])
        keys.append([0.147222, 0.11961])

        names.append("RElbowRoll")
        times.append([0.64, 1.4, 1.68, 2.08, 2.4,
                      2.64, 3.04, 3.32, 3.72, 4.44])
        keys.append([1.38524, 0.242414, 0.349066, 0.934249, 0.680678,
                     0.191986, 0.261799, 0.707216, 1.01927, 1.26559])

        names.append("RElbowYaw")
        times.append([0.64, 1.4, 2.08, 2.64, 3.32, 3.72, 4.44])
        keys.append([-0.312978, 0.564471, 0.391128,
                     0.348176, 0.381923, 0.977384, 0.826783])

        names.append("RHand")
        times.append([1.4, 3.32, 4.44])
        keys.append([0.853478, 0.854933, 0.425116])

        names.append("RShoulderPitch")
        times.append([0.64, 1.4, 2.08, 2.64, 3.32, 4.44])
        keys.append([0.247016, -1.17193, -1.0891, -1.26091, -1.14892, 1.02015])

        names.append("RShoulderRoll")
        times.append([0.64, 1.4, 2.08, 2.64, 3.32, 4.44])
        keys.append([-0.242414, -0.954191, -0.460242, -
        0.960325, -0.328317, -0.250085])

        names.append("RWristYaw")
        times.append([1.4, 3.32, 4.44])
        keys.append([-0.312978, -0.303775, 0.182504])

        self.motion.angleInterpolation(names, keys, times, True)

    def wipeForehead(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.96, 1.68, 3.28, 3.96, 4.52, 5.08])
        keys.append([-0.0261199, 0.427944, 0.308291,
                     0.11194, -0.013848, 0.061318])

        names.append("HeadYaw")
        times.append([0.96, 1.68, 3.28, 3.96, 4.52, 5.08])
        keys.append([-0.234743, -0.622845, -0.113558, -
        0.00617796, -0.027654, -0.036858])

        names.append("LElbowRoll")
        times.append([0.8, 1.52, 3.12, 3.8, 4.36, 4.92])
        keys.append([-0.866668, -0.868202, -0.822183, -
        0.992455, -0.966378, -0.990923])

        names.append("LElbowYaw")
        times.append([0.8, 1.52, 3.12, 3.8, 4.36, 4.92])
        keys.append([-0.957257, -0.823801, -1.00788, -
        0.925044, -1.24412, -0.960325])

        names.append("LHand")
        times.append([1.52, 3.12, 3.8, 4.92])
        keys.append([0.132026, 0.132026, 0.132026, 0.132026])

        names.append("LShoulderPitch")
        times.append([0.8, 1.52, 3.12, 3.8, 4.36, 4.92])
        keys.append([0.863599, 0.858999, 0.888144, 0.929562, 1.017, 0.977116])

        names.append("LShoulderRoll")
        times.append([0.8, 1.52, 3.12, 3.8, 4.36, 4.92])
        keys.append([0.286815, 0.230059, 0.202446,
                     0.406468, 0.360449, 0.31903])

        names.append("LWristYaw")
        times.append([1.52, 3.12, 3.8, 4.92])
        keys.append([0.386526, 0.386526, 0.386526, 0.386526])

        names.append("RElbowRoll")
        times.append([0.64, 1.36, 2.96, 3.64, 4.2, 4.76])
        keys.append([1.28093, 1.39752, 1.57239, 1.24105, 1.22571, 0.840674])

        names.append("RElbowYaw")
        times.append([0.64, 1.36, 2.96, 3.64, 4.2, 4.76])
        keys.append([-0.128898, -0.285367, -0.15651,
                     0.754686, 1.17193, 0.677985])

        names.append("RHand")
        times.append([1.36, 2.96, 3.64, 4.76])
        keys.append([0.166571, 0.166208, 0.166571, 0.166208])

        names.append("RShoulderPitch")
        times.append([0.64, 1.36, 2.96, 3.64, 4.2, 4.76])
        keys.append([0.0767419, -0.59515, -0.866668, -
        0.613558, 0.584497, 0.882091])

        names.append("RShoulderRoll")
        times.append([0.64, 1.36, 2.96, 3.64, 4.2, 4.76])
        keys.append([-0.019984, -0.019984, -0.615176, -
        0.833004, -0.224006, -0.214801])

        names.append("RWristYaw")
        times.append([1.36, 2.96, 3.64, 4.76])
        keys.append([-0.058334, -0.0521979, -0.067538, -0.038392])

        self.motion.angleInterpolation(names, keys, times, True)
    def blowkiss(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([1, 2.33333, 3.4])
        keys.append([-0.01078, -0.01078, -0.112024])

        names.append("HeadYaw")
        times.append([1, 2.33333, 3.4])
        keys.append([0.010696, 0.010696, 0.338973])

        names.append("LAnklePitch")
        times.append([1.2])
        keys.append([-0.359129])

        names.append("LAnkleRoll")
        times.append([1.2])
        keys.append([-0.0797476])

        names.append("LElbowRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([-1.56617, -0.658043, -1.56617, -0.658043, -0.305225])

        names.append("LElbowYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([-0.624379, -1.26866, -0.624379, -1.26866, -2.07862])

        names.append("LHand")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([0.917114, 1, 0.917114, 1, 0.997478])

        names.append("LHipPitch")
        times.append([1.2])
        keys.append([-0.27941])

        names.append("LHipRoll")
        times.append([1.2])
        keys.append([0.168548])

        names.append("LHipYawPitch")
        times.append([1.2])
        keys.append([-0.170318])

        names.append("LKneePitch")
        times.append([1.2])
        keys.append([0.680776])

        names.append("LShoulderPitch")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([0.496974, 0.225456, 0.496974, 0.225456, 0.4034])

        names.append("LShoulderRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([0, 0.05058, 0, 0.05058, 0.77923])

        names.append("LWristYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([-1.00941, -1.00941, -1.00941, -1.00941, -1.01095])

        names.append("RAnklePitch")
        times.append([1.2])
        keys.append([-0.184108])

        names.append("RAnkleRoll")
        times.append([1.2])
        keys.append([0.0675357])

        names.append("RElbowRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([0.504728, 0.431096, 0.504728, 0.431096, 0.596768])

        names.append("RElbowYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([0.42641, 0.41107, 0.42641, 0.41107, 0.196309])

        names.append("RHand")
        times.append([1, 2.33333, 3.4])
        keys.append([0.630909, 0.630909, 0.572727])

        names.append("RHipPitch")
        times.append([1.2])
        keys.append([-0.336004])

        names.append("RHipRoll")
        times.append([1.2])
        keys.append([0.0015544])

        names.append("RKneePitch")
        times.append([1.2])
        keys.append([0.556428])

        names.append("RShoulderPitch")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([1.14441, 1.10912, 1.14441, 1.10912, 1.27173])

        names.append("RShoulderRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([-0.271559, -0.253151, -0.271559, -0.253151, -0.579894])

        names.append("RWristYaw")
        times.append([1, 2.33333, 3.4])
        keys.append([0.958708, 0.958708, 0.944902])

        self.motion.angleInterpolation(names, keys, times, True)

    def macrenadance(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.64, 14.4,
             15.12, 16, 17.28])
        keys.append([-0.237812, -0.00617791, 0.0643861, 0.0643861, 0.0643861, 0.0643861, 0.0643861, 0.153358, 0.153358,
                     -0.190258, -0.104354, -0.285367, 0.00609397, 0.138018, 0.222388, 0.222388, 0.0735901, 0.294486,
                     -0.227074, -0.237812])

        names.append("HeadYaw")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.64, 14.4,
             15.12, 16, 17.28])
        keys.append([-4.19617e-05, -0.312978, 0.312894, -0.233211, 0.315962, 0.315962, -0.181053, -0.352862, -0.352862,
                     -0.234743, 0.211651, 0.535324, 0.308291, 0.024502, -0.266959, 0.550664, -0.119694, 0.501576,
                     -0.472515, -4.19617e-05])

        names.append("LAnklePitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [0.0966001, 0.0966001, 0.095066, 0.095066, 0.0966001, 0.0966001, 0.095066, 0.0966001, 0.0981341, 0.0966001,
             0.0966001, 0.0966001, -0.190258, -0.489389, 0.0981341])

        names.append("LAnkleRoll")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append([-0.116542, -0.116542, -0.116542, -0.116542, -0.116542, -0.116542, -0.116542, -0.116542, -0.115008,
                     -0.116542, -0.116542, -0.251533, 0.0583338, -0.211651, -0.115008])

        names.append("LElbowRoll")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append([-0.391128, -0.391128, -0.406468, -0.406468, -0.406468, -0.406468, -0.406468, -1.01393, -0.928028,
                     -0.934165, -0.934165, -0.934165, -0.782298, -1.44345, -1.44345, -0.429478, -0.435615, -1.017,
                     -1.39897, -1.42198, -1.42198, -1.52936, -0.414139, -0.417205])

        names.append("LElbowYaw")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [-1.21957, -1.21957, -1.20577, -1.20577, -1.43587, -1.43587, -1.43587, -1.23951, -0.0123138, -0.00617791,
             -0.00617791, -0.0107799, -1.34689, -0.983336, -0.983336, 0.214717, 0.205514, 0.075124, -4.19617e-05,
             -0.016916, -0.016916, -0.237812, -1.28247, -1.18582])

        names.append("LHand")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [0.3056, 0.3056, 0.8488, 0.8484, 0.8484, 0.8484, 0.8488, 0.8484, 0.8488, 0.8488, 0.8488, 0.8488, 0.8484,
             0.8484, 0.8488, 0.8484, 0.8468, 0.8468, 0.8468, 0.8484, 0.8484, 0.8472, 0.3056, 0.3056])

        names.append("LHipPitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [0.136568, 0.135034, 0.1335, 0.136568, 0.135034, 0.135034, 0.135034, 0.135034, 0.135034, 0.136568, 0.136568,
             0.162646, 0.0429941, -0.535324, 0.14117])

        names.append("LHipRoll")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append([0.115092, 0.115092, 0.115092, 0.115092, 0.115092, 0.115092, 0.115092, 0.115092, 0.115092, 0.115092,
                     0.115092, 0.312978, -0.260738, 0.431096, 0.113558])

        names.append("LHipYawPitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [-0.1733, -0.1733, -0.1733, -0.174835, -0.174835, -0.1733, -0.1733, -0.1733, -0.1733, -0.1733, -0.1733,
             -0.171766, -0.240796, -0.576742, -0.1733])

        names.append("LKneePitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append([-0.090548, -0.090548, -0.092082, -0.0923279, -0.092082, -0.092082, -0.092082, -0.090548, -0.090548,
                     -0.0890141, -0.090548, -0.092082, 0.423342, 1.33607, -0.092082])

        names.append("LShoulderPitch")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [1.49254, 1.49254, 0.397265, 0.397265, 0.432547, 0.432547, 0.434081, 0.239262, 0.0720561, 0.130348, 0.15796,
             0.095066, 0.223922, -0.690342, -0.690342, 0.622761, 0.662646, 0.920358, 1.42965, 1.41891, 1.42044, 1.14279,
             1.43271, 1.50481])

        names.append("LShoulderRoll")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [0.130348, 0.130348, 0.0137641, 0.0137641, 0.0106959, 0.0106959, 0.0106959, -0.147306, -0.27923, -0.247016,
             -0.248551, -0.247016, -0.0706061, 0.303691, 0.302157, -0.314159, -0.266959, 0.375789, 0.74088, 0.780764,
             0.771559, 0.67952, 0.337438, 0.130348])

        names.append("LWristYaw")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append([0.147222, 0.144154, 1.14586, 1.14586, -1.76875, -1.76875, -1.76722, -0.77778, -0.277696, -0.309909,
                     -0.308375, -0.308375, -0.30224, -0.846809, -0.846809, -0.461776, -0.48632, -0.731761, -0.902033,
                     -0.920441, -0.920441, -0.38661, 0.091998, 0.0889301])

        names.append("RAnklePitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [0.10282, 0.10282, 0.101286, 0.101286, 0.101286, 0.10282, 0.10282, 0.101286, 0.104354, 0.10282, 0.10282,
             -0.095066, -0.366584, -0.653443, 0.105888])

        names.append("RAnkleRoll")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append([0.073674, 0.075208, 0.073674, 0.075208, 0.075208, 0.073674, 0.075208, 0.073674, 0.07214, 0.073674,
                     0.073674, 0.00771189, 0.391212, 0.021518, 0.07214])

        names.append("RElbowRoll")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [0.389678, 0.401949, 0.401949, 0.418823, 0.418823, 1.22417, 1.20423, 1.13213, 1.1306, 0.299172, 0.684206,
             1.54325, 1.53404, 1.53251, 0.681137, 0.681137, 1.34843, 1.28247, 1.284, 1.29627, 1.29474, 1.27019,
             0.417291, 0.418823])

        names.append("RElbowYaw")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [1.17654, 1.15506, 1.15506, 1.83308, 1.83155, 1.26397, 0.141086, -0.0153821, -0.0153821, -0.719487, 1.33607,
             1.08603, 1.09217, 1.09217, -0.092082, -0.092082, -0.286901, -0.251617, -0.239346, -0.217869, -0.222472,
             -0.193327, 1.17807, 1.16273])

        names.append("RHand")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [0.31, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304, 0.9304,
             0.9304, 0.9304, 0.9304, 0.9284, 0.9284, 0.9284, 0.9304, 0.9304, 0.9284, 0.3096, 0.3064])

        names.append("RHipPitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append([0.131882, 0.131882, 0.130348, 0.131882, 0.131882, 0.131882, 0.128814, 0.130348, 0.131882, 0.131882,
                     0.131882, 0.133416, 0.131882, -0.0767419, 0.130348])

        names.append("RHipRoll")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [-0.0643861, -0.0643861, -0.0643861, -0.0643861, -0.0643861, -0.0643861, -0.0643861, -0.0643861, -0.0643861,
             -0.0643861, -0.0643861, 0.046062, -0.671851, 0.0767419, -0.06592])

        names.append("RHipYawPitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [-0.1733, -0.1733, -0.1733, -0.174835, -0.174835, -0.1733, -0.1733, -0.1733, -0.1733, -0.1733, -0.1733,
             -0.171766, -0.240796, -0.576742, -0.1733])

        names.append("RKneePitch")
        times.append([1, 1.96, 2.76, 3.48, 4.16, 5.08, 5.92, 10.4, 11.68, 12.76, 13.64, 14.4, 15.12, 16, 17.28])
        keys.append(
            [-0.091998, -0.091998, -0.0923279, -0.0923279, -0.0923279, -0.0923279, -0.091998, -0.091998, -0.091998,
             -0.091998, -0.091998, 0.131966, 0.455641, 1.16588, -0.0923279])

        names.append("RShoulderPitch")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [1.49569, 0.464844, 0.466378, 0.46331, 0.46331, 0.44797, 0.346725, 0.518534, 0.556884, 0.656595, 0.492455,
             -0.621227, -0.573674, -0.573674, 1.02015, 1.02169, 1.08918, 1.08611, 1.17355, 1.18122, 1.18122, 1.15975,
             1.37911, 1.48802])

        names.append("RShoulderRoll")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append(
            [-0.0951499, 0.076658, 0.076658, 0.16563, 0.16563, 0.314159, 0.314159, 0.314159, 0.314159, -0.161112,
             -0.237812, -0.260822, -0.254685, -0.260822, 0.306757, 0.303691, -0.60904, -0.610574, -0.610574, -0.638187,
             -0.639721, -0.630516, -0.319114, -0.10282])

        names.append("RWristYaw")
        times.append(
            [1, 1.96, 2.76, 3.48, 4.16, 4.64, 5.08, 5.52, 5.92, 6.52, 7.12, 7.64, 8.36, 9.08, 10.4, 11.68, 12.76, 13.28,
             13.64, 14.4, 15.12, 16, 16.68, 17.28])
        keys.append([0.05825, -1.15821, -1.15821, 1.19648, 1.19648, 0.561403, 0.078192, 0.0260359, 0.0275701, 0.628898,
                     -0.351328, 0.977116, 0.960242, 0.960242, 0.694859, 0.694859, 0.944902, 0.84826, 0.846726, 0.825251,
                     0.825251, 0.812978, 0.0398422, 0.131882])

        self.motion.angleInterpolation(names, keys, times, True)
    def pushups(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.116626, -0.116626, -0.115092, -0.115092, -0.11816, -0.115092, -0.11816, -0.115092, -0.11816, -0.115092,
             -0.11816, -0.115092, -0.601371, -0.535408, -0.536942, -0.544613, -0.437231, -0.270025, -0.222472,
             -0.230143])

        names.append("HeadYaw")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.0107799, -0.0107799, -0.0138481, -0.00464392, 0.0413762, -0.00464392, 0.0413762, -0.00464392, 0.0413762,
             -0.00464392, 0.0413762, -0.00464392, -0.0261199, -0.0276539, -0.0276539, -0.0353239, -0.019984,
             -0.00617791, -0.019984, -0.0123138])

        names.append("LAnklePitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append([-1.18429, -1.18944, -1.18944, -1.18944, -1.18944, -1.18944, -1.18944, -1.18944, -1.18944, -1.18944,
                     -1.18944, -1.18944, -1.18944, -1.18944, -1.18944, -1.01095, -1.17355, -1.18944, -0.895898,
                     0.0981341])

        names.append("LAnkleRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.075208, 0.066004, -0.05058, -0.049046, -0.049046, -0.049046, -0.049046, -0.049046, -0.049046, -0.049046,
             -0.049046, -0.049046, -0.00455999, 0.066004, 0.0429941, -0.05825, -0.061318, 0.066004, 0.067538,
             -0.115008])

        names.append("LElbowRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.361981, -0.0398422, -0.0398422, -0.0536479, -1.44345, -0.0536479, -1.44345, -0.0536479, -1.44345,
             -0.0536479, -1.44345, -0.0536479, -0.0352399, -0.0643861, -0.049046, -0.052114, -0.0429101, -0.0352399,
             -0.0444441, -0.389594])

        names.append("LElbowYaw")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append([-1.25179, -0.834538, -0.668866, -0.668866, -0.983336, -0.668866, -0.983336, -0.668866, -0.983336,
                     -0.668866, -0.983336, -0.668866, -1.22571, -1.23951, -1.23798, -1.23951, -1.23951, -1.23491,
                     -1.21037, -1.21344])

        names.append("LHand")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.6256, 0.0140001, 0.0244, 0.0244, 0.064, 0.0244, 0.064, 0.0244, 0.064, 0.0244, 0.064, 0.0244, 0.0648,
             0.0684, 0.0684, 0.0684, 0.0668, 0.0648, 0.0707999, 0.2976])

        names.append("LHipPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.608956, -1.39283, -1.57384, -0.400331, -0.400331, -0.400331, -0.400331, -0.400331, -0.400331, -0.400331,
             -0.400331, -0.400331, -1.47106, -1.38516, -1.26704, -0.990921, -0.766959, -0.631966, -0.581345, 0.1335])

        names.append("LHipRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append([-0.0536479, 0.460242, -0.0843279, -0.021434, -0.021434, -0.021434, -0.021434, -0.021434, -0.021434,
                     -0.021434, -0.021434, -0.021434, -0.303691, -0.185572, -0.345107, -0.151824, 0.167248, -0.0413762,
                     -0.0152981, 0.112024])

        names.append("LHipYawPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.366584, -0.253067, -0.340507, -0.0551819, -0.0551819, -0.0551819, -0.0551819, -0.0551819, -0.0551819,
             -0.0551819, -0.0551819, -0.0551819, -0.493905, -0.673385, -0.739346, -0.601285, -0.530721, -0.473963,
             -0.481634, -0.1733])

        names.append("LKneePitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [2.11255, 2.11228, 2.06319, 0.501576, 0.506179, 0.501576, 0.506179, 0.501576, 0.506179, 0.501576, 0.506179,
             0.501576, 2.11228, 2.11255, 2.11255, 1.82849, 2.11255, 2.11075, 1.66895, -0.0874801])

        names.append("LShoulderPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [1.65975, 0.562937, 0.167164, -0.0153821, 0.745483, -0.0153821, 0.745483, -0.0153821, 0.745483, -0.0153821,
             0.745483, -0.0153821, 0.378855, 0.259204, 0.386526, 1.25017, 1.28238, 1.15353, 1.17193, 1.48947])

        names.append("LShoulderRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.223922, 0.345107, 0.00762796, 0.0106959, 0.734743, 0.0106959, 0.734743, 0.0106959, 0.734743, 0.0106959,
             0.734743, 0.0106959, 0.0152981, -0.0414601, -4.19617e-05, 0.289883, 0.268407, 0.260738, 0.225456,
             0.128814])

        names.append("LWristYaw")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.0367741, 0.812978, 0.584411, 0.584411, 1.51862, 0.584411, 1.51862, 0.584411, 1.51862, 0.584411, 1.51862,
             0.584411, 1.10904, 0.983252, 1.017, 0.960242, 0.94797, 0.710201, 0.693327, 0.147222])

        names.append("RAnklePitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-1.1863, -1.07836, -1.1863, -1.1863, -1.18574, -1.1863, -1.18574, -1.1863, -1.18574, -1.1863, -1.18574,
             -1.1863, -1.1863, -0.228525, 0.713353, 0.823801, -0.506179, -1.18421, -0.776162, 0.10282])

        names.append("RAnkleRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append([-0.0367741, 0.142704, -0.0444441, 0.0291878, 0.0291878, 0.0291878, 0.0291878, 0.0291878, 0.0291878,
                     0.0291878, 0.0291878, 0.0291878, 0.00464392, 0.207132, 0.093616, -0.115008, 0.231675, -0.0137641,
                     0.0614019, 0.07214])

        names.append("RElbowRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.27923, 0.297638, 0.204064, 0.231675, 1.35763, 0.231675, 1.35763, 0.231675, 1.35763, 0.231675, 1.35763,
             0.231675, 0.038392, 0.0583338, 0.0567998, 0.06447, 0.0598679, 0.0349066, 0.0429941, 0.411154])

        names.append("RElbowYaw")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [1.18267, 1.18114, 1.15659, 1.21182, 0.990921, 1.21182, 0.990921, 1.21182, 0.990921, 1.21182, 0.990921,
             1.21182, 1.15813, 1.18574, 1.18574, 1.18114, 1.17807, 1.18881, 1.17654, 1.16887])

        names.append("RHand")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.7316, 0.7316, 0.2236, 0.224, 0.1612, 0.224, 0.1612, 0.224, 0.1612, 0.224, 0.1612, 0.224, 0.1528, 0.1572,
             0.1572, 0.1572, 0.1556, 0.1528, 0.1572, 0.306])

        names.append("RHipPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.602905, -0.472515, -1.57699, -0.403483, -0.40962, -0.403483, -0.40962, -0.403483, -0.40962, -0.403483,
             -0.40962, -0.403483, -1.49723, -1.65369, -1.63989, -1.26559, -1.24718, -0.658129, -0.619779, 0.133416])

        names.append("RHipRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append([-0.0106959, 0.366667, 0.312978, -0.136484, -0.136484, -0.136484, -0.136484, -0.136484, -0.136484,
                     -0.136484, -0.136484, -0.136484, 0.265424, 0.280764, 0.29457, 0.288435, -0.216252, -0.0413762,
                     -0.021434, -0.061318])

        names.append("RHipYawPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.366584, -0.253067, -0.340507, -0.0551819, -0.0551819, -0.0551819, -0.0551819, -0.0551819, -0.0551819,
             -0.0551819, -0.0551819, -0.0551819, -0.493905, -0.673385, -0.739346, -0.601285, -0.530721, -0.473963,
             -0.481634, -0.1733])

        names.append("RKneePitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [2.11255, 1.2073, 2.06481, 0.513931, 0.520068, 0.513931, 0.520068, 0.513931, 0.520068, 0.513931, 0.520068,
             0.513931, 2.11255, 1.6, 0.598302, 0.2102, 1.97891, 2.11255, 1.61995, -0.0889301])

        names.append("RShoulderPitch")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [1.61995, 1.61688, 0.319114, 0.0414601, 0.605971, 0.0414601, 0.605971, 0.0414601, 0.605971, 0.0414601,
             0.605971, 0.0414601, 0.365133, 1.29627, 1.29934, 1.30087, 1.30701, 1.1398, 1.17202, 1.47728])

        names.append("RShoulderRoll")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [-0.188724, -0.182588, 0.022968, 0.022968, -0.70108, 0.022968, -0.70108, 0.022968, -0.70108, 0.022968,
             -0.70108, 0.022968, 0.0152981, -0.377407, -0.397349, -0.343659, -0.296104, -0.204064, -0.181053,
             -0.101286])

        names.append("RWristYaw")
        times.append(
            [1.68, 3.16, 4.32, 5.96, 6.8, 7.56, 8.24, 9, 9.8, 10.56, 11.4, 12.16, 13.68, 14.68, 15.68, 16.68, 17.68,
             18.68, 19.76, 21.4])
        keys.append(
            [0.10427, 0.10427, -1.1352, -1.13367, -1.06617, -1.13367, -1.06617, -1.13367, -1.06617, -1.13367, -1.06617,
             -1.13367, -1.13827, -1.14441, -1.14441, -1.13827, -1.12293, -0.857548, -0.840674, 0.0720561])

        self.motion.angleInterpolation(names, keys, times, True)
    def bow(self):
        names = list()
        times = list()
        keys = list()

        names.append("LAnklePitch")
        times.append([0.933333, 3])
        keys.append([-0.121359, -0.409751])

        names.append("LAnkleRoll")
        times.append([0.933333, 3])
        keys.append([0.0153604, -0.116564])

        names.append("LElbowRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([-0.306757, -1.30539, -0.306757])

        names.append("LElbowYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([-0.12583, 0.469363, -0.12583])

        names.append("LHand")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.924024, 0.924024, 0.924024])

        names.append("LHipPitch")
        times.append([0.933333, 3])
        keys.append([0.0749446, -0.761086])

        names.append("LHipRoll")
        times.append([0.933333, 3])
        keys.append([-0.0477461, 0.028954])

        names.append("LHipYawPitch")
        times.append([0.933333, 3])
        keys.append([0.0291025, -0.319116])

        names.append("LKneePitch")
        times.append([0.933333, 3])
        keys.append([0.0855841, 1.0474])

        names.append("LShoulderPitch")
        times.append([0.933333, 3, 4.53333])
        keys.append([2.0417, 2.06319, 2.0417])

        names.append("LShoulderRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.417205, 0.246933, 0.417205])

        names.append("LWristYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([-0.998676, -1.01708, -0.998676])

        names.append("RAnklePitch")
        times.append([0.933333, 3])
        keys.append([-0.102805, -0.543063])

        names.append("RAnkleRoll")
        times.append([0.933333, 3])
        keys.append([-0.00456227, 0.135032])

        names.append("RElbowRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.435699, 1.27786, 0.435699])

        names.append("RElbowYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.222388, 0.374254, 0.222388])

        names.append("RHand")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.917842, 0.469091, 0.917842])

        names.append("RHipPitch")
        times.append([0.933333, 3])
        keys.append([0.041361, -0.65354])

        names.append("RHipRoll")
        times.append([0.933333, 3])
        keys.append([0.0168944, -0.0444656])

        names.append("RKneePitch")
        times.append([0.933333, 3])
        keys.append([0.103898, 1.03657])

        names.append("RShoulderPitch")
        times.append([0.933333, 3, 4.53333])
        keys.append([1.06617, 0.943452, 1.06617])

        names.append("RShoulderRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([-0.398883, -0.0429939, -0.398883])

        names.append("RWristYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([0.949504, 0.964844, 0.949504])

        self.motion.angleInterpolation(names, keys, times, True)

    def blink(self):
        self.led.fadeRGB("FaceLeds", 0xffffff, 1)
        time.sleep(0.5)
        self.led.fadeRGB("FaceLeds", 0x000000, 1)
        time.sleep(0.5)
        self.led.fadeRGB("FaceLeds", 0xffffff, 1)

    def pointLookAt(self, mode, frame, x, y, z, speed):
        speed = min(max(speed, 1.), 100.)
        speed /= 100.
        if mode == "POINT":
            self.tracker.pointAt("Arms", [x, y, z], frame, speed)
        elif mode == "LOOK":
            self.tracker.lookAt([x, y, z], frame, speed, False)

    # SOUNDS

    def setVolume(self, volume):
        self.tts.setVolume(volume / 100.0)

    def getVolume(self):
        return self.tts.getVolume()

    def getLanguage(self):
        return self.tts.getLanguage()

    def setLanguage(self, language):
        self.tts.setLanguage(language)

    def say(self, text, speed=30, shape=30):
        # encode string with UTF-8 because the say method can't handle the unicode representation
        textString = str(text)
        textString = u"{}".format(textString)
        textString = textString.decode("unicode-escape").encode("utf-8")

        speed = max(0, min(100, speed))
        shape = max(0, min(100, shape))
        speed = int(speed * 1.5 + 50)  # range 50 - 200
        shape = int(shape * 1.5 + 50)  # range 50 - 200
        # additional String containing the parameters (usable with all engines)
        # RSPD = speed [50 - 400%]
        # VCT = voice shape [50 - 200%]
        parameterString = "\\RSPD=" + str(math.floor(speed)) + "\\"
        parameterString += "\\VCT=" + str(math.floor(shape)) + "\\"

        # combine strings and add \RST\ to reset control sequences to default
        self.tts.say(parameterString + textString + "\\RST\\")
        print text
    #
    # def playFile(self, filename):
    #     self.aup.playFile("/usr/share/naoqi/wav/" + filename + ".wav")
    #
    # def dialog(self, phrase, answer):
    #     vocabulary = [phrase]
    #     self.asr.setAudioExpression(True)
    #     self.asr.setVisualExpression(True)
    #     self.asr.setVocabulary(vocabulary, False)
    #     self.asr.subscribe("Open_Roberta")
    #     while (True):
    #         recognizedWord = self.memory.getData("LastWordRecognized")
    #         if recognizedWord[1] == phrase:
    #             self.tts.say(answer)
    #             self.asr.setAudioExpression(False)
    #             self.asr.setVisualExpression(False)
    #             self.asr.unsubscribe("Open_Roberta")
    #             break
    #
    # def recognizeWord(self, vocabulary):
    #     self.asr.setAudioExpression(True)
    #     self.asr.setVisualExpression(True)
    #     self.asr.pause(1)
    #     self.asr.setVocabulary(vocabulary, False)
    #     self.asr.pause(0)
    #     self.asr.subscribe("Open_Roberta")
    #     while (True):
    #         recognizedWord = self.memory.getData("LastWordRecognized")
    #         if recognizedWord[0] in vocabulary:
    #             time.sleep(1)
    #             self.asr.setAudioExpression(False)
    #             self.asr.setVisualExpression(False)
    #             self.asr.unsubscribe("Open_Roberta")
    #             return recognizedWord

     # LIGHTS

    def setLeds(self, name, color):
        self.led.fadeRGB(name, color, 0.1)

    def setIntensity(self, name, intensity):
        self.led.setIntensity(name, intensity / 100.0)

    def ledOff(self, name):
        self.led.off(name)

    def ledReset(self, name):
        self.led.reset(name)

    def randomEyes(self, duration):
        self.led.randomEyes(duration / 1000)

    def rasta(self, duration):
        self.led.rasta(duration / 1000)
    #
    # # VISION
    #
    # def recordVideo(self, resolution, cameraId, duration, fileName):
    #     recordFolder = "/home/nao/recordings/cameras/"
    #     self.video.stopRecording()
    #     self.video.setFrameRate(10.0)
    #
    #     # 0 - 160*120  1 - 320*240  2 - 640*480
    #     self.video.setResolution(resolution)
    #
    #     # 0 - Top  1 - Bottom
    #     if cameraId == "Top":
    #         self.video.setCameraID(0)
    #     else:
    #         self.video.setCameraID(1)
    #
    #     # self.video.setVideoFormat("MJPG")
    #     self.video.startRecording(recordFolder, fileName)
    #     time.sleep(duration / 1000)
    #     self.video.stopRecording()
    #
    # def takePicture(self, cameraId, fileName):
    #     recordFolder = "/home/nao/recordings/cameras/"
    #
    #     # 0 - 160*120  1 - 320*240  2 - 640*480  3 - 1280*960
    #     self.photo.setResolution(1)
    #
    #     # 0 - Top  1 - Bottom
    #     if cameraId == "Top":
    #         self.photo.setCameraID(0)
    #     else:
    #         self.photo.setCameraID(1)
    #
    #     self.photo.setPictureFormat("jpg")
    #     self.photo.takePicture(recordFolder, fileName)
    #
    # SENSORS

    def accelerometer(self, coordinate):
        return self.memory.getData(
            "Device/SubDeviceList/InertialSensor/Accelerometer{}/Sensor/Value".format(coordinate.upper()))

    def gyrometer(self, coordinate):
        return self.memory.getData(
            "Device/SubDeviceList/InertialSensor/Gyroscope{}/Sensor/Value".format(coordinate.upper()))

    def ultrasonic(self):
        # Retrieve sonar data from ALMemory (distance in centimeters)
        return self.memory.getData("Device/SubDeviceList/US/Right/Sensor/Value") * 100

    def fsr(self, side):
        return self.memory.getData("{}FootTotalWeight".format(side))

    def headsensor(self, side):
        side = side.title()
        return self.memory.getData("{}TactilTouched".format(side)) == 1

    def handsensor(self, side):
        side = side.title()
        return self.memory.getData("Hand{}BackTouched".format(side)) == 1

    def bumpersensor(self, side):
        side = side.title()
        return self.memory.getData("{}BumperPressed".format(side)) == 1

    # def getDetectedMarks(self):
    #     data = self.memory.getData("LandmarkDetected")
    #     if (not data is None and len(data) != 0):
    #         marks = data[1]
    #     else:
    #         return [-1]
    #     result = []
    #     for mark in marks:
    #         result.append(mark[1][0])
    #         self.naoMarkInformation[mark[1][0]] = mark[0][1:]  # alpha, beta, xangle, yangle, heading
    #     return list(result)
    #
    # def getDetectedMark(self):
    #     data = self.memory.getData("LandmarkDetected")
    #     if (not data is None and len(data) != 0):
    #         marks = data[1]
    #     else:
    #         return -1
    #     result = marks[0][1][0]
    #     self.naoMarkInformation[marks[0][1][0]] = marks[0][0][1:]  # alpha, beta, xangle, yangle, heading
    #     return result
    #
    # def getElectricCurrent(self, jointName):
    #     return self.memory.getData("Device/SubDeviceList/" + jointName + "/ElectricCurrent/Sensor/Value")
    #
    # def wait(self, timeMilliSeconds):
    #     timeSeconds = timeMilliSeconds / 1000
    #     time.sleep(timeSeconds)
    #
    # def getNaoMarkInformation(self, id):
    #     if (id in self.naoMarkInformation):
    #         return self.naoMarkInformation[id]
    #     else:
    #         return [-1]

